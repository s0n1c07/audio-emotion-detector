# -*- coding: utf-8 -*-
"""Audio_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h84lQrVnK7_Pb5LZBOK7dIzYgHxRVR7s
"""

# !wget -O Audio_Song_Actors_01-24.zip "https://zenodo.org/records/1188976/files/Audio_Song_Actors_01-24.zip?download=1"
# !unzip Audio_Song_Actors_01-24.zip -d Audio_Song_Actors
# !wget -O Audio_Speech_Actors_01-24.zip "https://zenodo.org/records/1188976/files/Audio_Speech_Actors_01-24.zip?download=1"
# !unzip Audio_Speech_Actors_01-24.zip -d Audio_Speech_Actors

# !pip install transformers datasets torchaudio evaluate -q

import os

root_dir = "/content/audio_data"
all_audio_paths = []

# Traverse recursively and collect all .wav files
for folder, _, files in os.walk(root_dir):
    for file in files:
        if file.endswith(".wav"):
            all_audio_paths.append(os.path.join(folder, file))

print(f"Total WAV files found: {len(all_audio_paths)}")

from sklearn.model_selection import train_test_split

train_files, val_files = train_test_split(all_audio_paths, test_size=0.2, random_state=42)

import torchaudio
import torch
from transformers import AutoFeatureExtractor, AutoModelForAudioClassification

extractor = AutoFeatureExtractor.from_pretrained("Hatman/audio-emotion-detection")
model = AutoModelForAudioClassification.from_pretrained("Hatman/audio-emotion-detection")
model.eval().to("cuda" if torch.cuda.is_available() else "cpu")

id2label = model.config.id2label

results = []

for path in val_files:
    waveform, sr = torchaudio.load(path)
    if sr != 16000:
        waveform = torchaudio.transforms.Resample(orig_freq=sr, new_freq=16000)(waveform)
    waveform = waveform.squeeze()

    inputs = extractor(waveform, sampling_rate=16000, return_tensors="pt", padding=True)
    inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        logits = model(**inputs).logits
        pred = torch.argmax(logits, dim=-1).item()
        label = id2label[pred]

    results.append({"file": path, "predicted_emotion": label})

import pandas as pd
df = pd.DataFrame(results)
df.to_csv("emotion_predictions.csv", index=False)
print(df.head())
